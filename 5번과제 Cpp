MyActor.cpp:


#include "MyActor.h"
#include "Math/UnrealMathUtility.h"

// Sets default values
AMyActor::AMyActor()
{
    // Set this actor to call Tick() every frame. You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;

    // 시작 좌표 초기화
    CurrentPosition = FVector(0, 0, 0);
}

// Called when the game starts or when spawned
void AMyActor::BeginPlay()
{
    Super::BeginPlay();

    // 이동 함수 호출
    Move();
}

// Called every frame
void AMyActor::Tick(float DeltaTime)
{
    Super::Tick(DeltaTime);
}

// 랜덤으로 0 또는 1을 반환하는 함수
int32 AMyActor::Step()
{
    return FMath::RandRange(0, 1); // 0 또는 1을 랜덤으로 반환
}

// 이동을 관리하는 함수
void AMyActor::Move()
{
    // 시작 좌표 출력
    UE_LOG(LogTemp, Warning, TEXT("Starting Position: (%f, %f)"), CurrentPosition.X, CurrentPosition.Y);

    for (int32 i = 0; i < 10; ++i)
    {
        // x, y 이동을 위한 랜덤 Step 호출
        int32 StepX = Step();
        int32 StepY = Step();

        // 각 이동에서 x, y 좌표가 2 이상 이동하지 않도록 처리
        if (FMath::Abs(StepX) < 2 && FMath::Abs(StepY) < 2) 
        {
            // 새로운 좌표 계산
            CurrentPosition.X += StepX;
            CurrentPosition.Y += StepY;

            // 현재 좌표 출력
            UE_LOG(LogTemp, Warning, TEXT("Step %d: New Position: (%f, %f)"), i + 1, CurrentPosition.X, CurrentPosition.Y);
        }
        else 
        {
            // 2 이상 이동이 불가능한 경우는 다시 계산하도록 하여 올바른 범위 내로 이동
            --i; // 현재 스텝을 무효화하고 다시 실행
            continue;
        }
    }

    // 최종 좌표 출력
    UE_LOG(LogTemp, Warning, TEXT("Final Position: (%f, %f)"), CurrentPosition.X, CurrentPosition.Y);
}
